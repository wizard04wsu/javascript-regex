name: 'JavaScript RegExp'
scopeName: 'source.js.regexp'
type: 'tree-sitter'
parser: '../../tree-sitter-regex-js'

injectionRegex: '^regex-js$'

scopes:
  'disjunction_delimiter': 'keyword.operator.disjunction.regexp'
  
  #####  quantifiers  #####
  
  #'count_quantifier, one_or_more, zero_or_more, optional': 'storage.modifier'
  'zero_or_more, one_or_more, optional, count_quantifier': 'keyword.operator.quantifier.regexp'
  'count_quantifier > count_quantifier_begin': 'punctuation.definition.quantifier.count.begin.regexp'
  'count_quantifier > count_quantifier_delimiter': 'punctuation.definition.quantifier.count.delimiter.regexp'
  'count_quantifier > count_quantifier_end': 'punctuation.definition.quantifier.count.end.regexp'
  
  #####  lookaround assertions  #####
  
  'lookahead_assertion': 'meta.group.assertion.look-ahead.regexp'
  'lookahead_assertion > lookahead_identifier': 'meta.assertion.look-ahead.regexp'
  'negative_lookahead_assertion': 'meta.group.assertion.negative-look-ahead.regexp'
  'negative_lookahead_assertion > negative_lookahead_identifier': 'meta.assertion.negative-look-ahead.regexp'
  'lookbehind_assertion': 'meta.group.assertion.look-behind.regexp'
  'lookbehind_assertion > lookbehind_identifier': 'meta.assertion.look-behind.regexp'
  'negative_lookbehind_assertion': 'meta.group.assertion.negative-look-behind.regexp'
  'negative_lookbehind_assertion > negative_lookbehind_identifier': 'meta.assertion.negative-look-behind.regexp'
  
  #####  groups and backreferences  #####
  
  'backreference_escape': 'keyword.other.back-reference.regexp'
  'backreference_escape > group_name': 'entity.name.tag.regexp'	#TODO: change the scope for this?
  
  'named_capturing_group': 'meta.group.capturing.named.regexp'
  'named_capturing_group > named_capturing_group_identifier': 'entity.name.type.named.regexp'
  'named_capturing_group > named_capturing_group_identifier > group_name': 'entity.name.tag.regexp'
  'non_capturing_group': 'meta.group.non-capturing.regexp'
  'non_capturing_group > non_capturing_group_identifier': 'entity.name.type.non-capturing.regexp'
  'anonymous_capturing_group': 'meta.group.capturing.anonymous.regexp'
  
  #'group_name': 'variable.other.object.property'
  
  #'"(", "(?", "(?:", "(?<"': 'punctuation.definition.parameters.begin.bracket.round'
  'group_begin': 'punctuation.definition.group.begin.bracket.round.regexp'
  #'">", ")"': 'punctuation.definition.parameters.end.bracket.round'
  'group_end': 'punctuation.definition.group.end.bracket.round.regexp'
  
  #####  character sets  #####
  
  'character_class': 'constant.other.character-class.set.regexp'
  'character_class > set_begin': 'punctuation.definition.character-class.set.begin.regexp'
  'character_class > set_end': 'punctuation.definition.character-class.set.end.regexp'
  'character_class > set_negation': 'keyword.operator.negation.regexp'
  'character_class > character_range': 'constant.other.character-class.range.regexp'
  'character_class > character_range > range_delimiter': 'punctuation.definition.character-class.range.hyphen.regexp'
  
  #####  character class escapes  #####
  
  'character_class_escape': 'constant.other.character-class.escape.regexp'
  
  #####  character escapes  #####
  
  'null_character': 'constant.character.numeric.null.regexp'
  'identity_escape': 'constant.character.escape.backslash.regexp'
  'identity_escape > escape_operator': 'keyword.operator.escape-character.regexp'
  'unicode_escape': 'constant.character.numeric.unicode.regexp'
  'unicode_escape > unicode_code': 'constant.character.numeric.unicode.character-code.regexp'
  'octal_escape': 'constant.character.numeric.octal.regexp'
  'octal_escape > octal_code': 'constant.character.numeric.octal.character-code.regexp'
  'hexadecimal_escape': 'constant.character.numeric.hexadecimal.regexp'
  'hexadecimal_escape > hexadecimal_code': 'constant.character.numeric.hexadecimal.character-code.regexp'
  'control_letter_escape': 'constant.character.control.regexp'
  'control_letter_escape > control_letter_code': 'constant.character.control.character-code.regexp'
  'special_escape': 'constant.character.escape.special.regexp'
  
  #####  boundary assertions  #####
  
  #'start_assertion, end_assertion, boundary_assertion, non_boundary_assertion': 'constant.character.character-class.regexp'
  'start_assertion, end_assertion, boundary_assertion, non_boundary_assertion': 'keyword.control.anchor.regexp'
  
  #####  characters  #####
  
  'any_character': 'constant.character.regexp'
