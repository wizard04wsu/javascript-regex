@import "colors.less";

@half-line-height-unit: ~"calc(var(--editor-line-height) / 2)";
@half-line-height-nounit: ~"calc(var(--editor-line-height) * 1em / 2)";
//@line-padding-unit: ~"calc(var(--editor-line-height) - 1em)";
//@line-padding-nounit: ~"calc(var(--editor-line-height) * 1em - 1em)";
@half-line-padding-unit: ~"calc((var(--editor-line-height) - 1em) / 2)";
@half-line-padding-nounit: ~"calc((var(--editor-line-height) * 1em - 1em) / 2)";
@indent-width-unit: ~"calc(0.5em + (var(--editor-line-height) - 1em) / 4)";
@indent-width-nounit: ~"calc(0.5em + (var(--editor-line-height) * 1em - 1em) / 4)";



.syntax--source.syntax--js .syntax--string.syntax--regexp > .syntax--meta.syntax--pattern {
	
	//groups (including lookaround assertions)
	> .syntax--meta.syntax--group,
	:not(.syntax--invalid):not(.syntax--punctuation) > .syntax--meta.syntax--group:first-child,
	:not(.syntax--invalid) > :not(.syntax--punctuation):first-child + .syntax--meta.syntax--group,
	:not(.syntax--invalid) > :not(.syntax--definition):first-child + .syntax--meta.syntax--group,
	:not(.syntax--invalid) > :not(.syntax--group):first-child + .syntax--meta.syntax--group,
	:not(.syntax--invalid) > :not(.syntax--begin):first-child + .syntax--meta.syntax--group,
	:not(.syntax--invalid) > .syntax--meta.syntax--group:nth-child(n+3) {
		background-color: @group-bg;
		padding: 1px 0;
		position: relative;
		//border-radius: @half-line-height-unit;
		//border-radius: @half-line-height-nounit;
		
		//lines above and below group content
		&::before {
			content: "";
			position: absolute;
			display: block;
			border: 1px solid @group-delimiter;
			border-width: 1px 0;
			inset: -1px @half-line-height-unit;
			inset: -1px @half-line-height-nounit;
		}
		&.syntax--capturing::before {
			border-color: @group-delimiter-capturing;
		}
		
		//delimiters '(' and ')'
		.syntax--punctuation.syntax--definition.syntax--group.syntax--begin  .syntax--punctuation.syntax--definition.syntax--group.syntax--begin,
		.syntax--punctuation.syntax--definition.syntax--group.syntax--end  .syntax--punctuation.syntax--definition.syntax--group.syntax--end {
			color: transparent;	//hide the parenthesis
		}
		> .syntax--punctuation.syntax--definition.syntax--group,
		> .syntax--meta.syntax--group > .syntax--punctuation.syntax--definition.syntax--group {
			
			&.syntax--begin,
			&.syntax--end {
				display: inline-block;
				position: relative;
				color: transparent;	//hide the parenthesis
			}
			
			&.syntax--begin::before,
			&.syntax--end::after {
				content: "";
				position: absolute;
				width: @half-line-height-unit;
				width: @half-line-height-nounit;
			}
			
			&.syntax--begin::before {
				inset: 1px auto 2px @half-line-padding-unit;
				inset: 1px auto 2px @half-line-padding-nounit;
				border-top-left-radius: 100% 50%;
				border-bottom-left-radius: 100% 50%;
				box-shadow:
					-1px -1px 0 0 @group-delimiter,
					-1px 1px 0 0 @group-delimiter;
				border-left: 1px solid @group-delimiter;
			}
			
			&.syntax--end::after {
				inset: 1px @half-line-padding-unit 2px auto;
				inset: 1px @half-line-padding-nounit 2px auto;
				border-top-right-radius: 100% 50%;
				border-bottom-right-radius: 100% 50%;
				box-shadow:
					1px -1px 0 0 @group-delimiter,
					1px 1px 0 0 @group-delimiter;
				border-right: 1px solid @group-delimiter;
			}
		}
		&.syntax--capturing > .syntax--punctuation.syntax--definition.syntax--group,
		> .syntax--meta.syntax--group.syntax--capturing > .syntax--punctuation.syntax--definition.syntax--group {
			
			&.syntax--begin::before {
				box-shadow:
					-1px -1px 0 0 @group-delimiter-capturing,
					-1px 1px 0 0 @group-delimiter-capturing;
				border-left-color: @group-delimiter-capturing;
			}
			
			&.syntax--end::after {
				box-shadow:
					1px -1px 0 0 @group-delimiter-capturing,
					1px 1px 0 0 @group-delimiter-capturing;
				border-right-color: @group-delimiter-capturing;
			}
		}
	}
}

.line > :first-child > .syntax--source.syntax--js:first-child > .syntax--string.syntax--regexp:first-child > .syntax--meta.syntax--pattern:first-child {
	
	> .syntax--meta.syntax--pattern:first-child > .syntax--meta.syntax--group:first-child,
	.syntax--meta.syntax--group:first-child {
		
		&::before {
			left: @indent-width-unit;
			left: @indent-width-nounit;
		}
	}
	:not(:first-child) .syntax--meta.syntax--group:first-child {
		
		&::before {
			left: @half-line-height-unit;
			left: @half-line-height-nounit;
		}
	}
}
/*.line > :first-child > .syntax--source.syntax--js:first-child > .syntax--string.syntax--regexp:first-child {
	.syntax--meta.syntax--group:first-child {
		border-top-left-radius: 0;
		border-bottom-left-radius: 0;
	}
	:not(:first-child) .syntax--meta.syntax--group:first-child {
		border-top-right-radius: @line-padding-unit 50%;
		border-top-right-radius: @line-padding-nounit 50%;
		border-bottom-right-radius: @line-padding-unit 50%;
		border-bottom-right-radius: @line-padding-nounit 50%;
	}
}
.line > :last-child > .syntax--source.syntax--js:last-child > .syntax--string.syntax--regexp:last-child {
	.syntax--meta.syntax--group:last-child {
		border-top-right-radius: 0;
		border-bottom-right-radius: 0;
	}
	:not(:last-child) .syntax--meta.syntax--group:last-child {
		border-top-left-radius: @line-padding-unit 50%;
		border-top-left-radius: @line-padding-nounit 50%;
		border-bottom-left-radius: @line-padding-unit 50%;
		border-bottom-left-radius: @line-padding-nounit 50%;
	}
}*/
